unit TestuNotificationFramework;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Vcl.StdCtrls, System.SysUtils, uNotificationFramework,
  System.Classes, DateUtils;

type
  // Test methods for class INotificationSender

  TestINotificationSender = class(TTestCase)
  strict private
    FINotificationSender: INotificationSender;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSendNotification;
    procedure TestGetNotificationType;
  end;
  // Test methods for class TNotification

  TestTNotification = class(TTestCase)
  strict private
    FNotification: TNotification;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLogNotification;
    procedure TestScheduleNext;
    procedure TestStart;
    procedure TestStop;
  end;

implementation

procedure TestINotificationSender.SetUp;
begin
  // TODO: Initialize FINotificationSender
end;

procedure TestINotificationSender.TearDown;
begin
  FINotificationSender := nil;
end;

procedure TestINotificationSender.TestSendNotification;
var
  AMessage: string;
begin
  // TODO: Setup method call parameters
  FINotificationSender.SendNotification(AMessage);
  // TODO: Validate method results
end;

procedure TestINotificationSender.TestGetNotificationType;
var
  ReturnValue: string;
begin
  ReturnValue := FINotificationSender.GetNotificationType;
  // TODO: Validate method results
end;

procedure TestTNotification.SetUp;
begin
  FNotification := TNotification.Create;
end;

procedure TestTNotification.TearDown;
begin
  FNotification.Free;
  FNotification := nil;
end;

procedure TestTNotification.TestLogNotification;
var
  LogMemo: TMemo;
begin
  LogMemo := TMemo.Create(nil);
  try
    FNotification := TNotification.Create(FINotificationSender, 'Teste de log', nfDaily, LogMemo);
    FNotification.Start;
    Assert.IsTrue(LogMemo.Lines.Count > 0, 'Nenhuma mensagem foi registrada no log.');
  finally
    LogMemo.Free;
  end;
end;

procedure TestTNotification.TestScheduleNext;
begin
  FNotification.ScheduleNext;
  // TODO: Validate method results
end;

procedure TestTNotification.TestStart;
begin
  FNotification.Start;
  // TODO: Validate method results
end;

procedure TestTNotification.TestStop;
begin
  FNotification.Stop;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestINotificationSender.Suite);
  RegisterTest(TestTNotification.Suite);
end.

